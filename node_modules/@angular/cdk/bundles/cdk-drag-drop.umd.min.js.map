{"version":3,"file":"cdk-drag-drop.umd.min.js","sources":["../../src/cdk/drag-drop/drag.ts","../../src/cdk/drag-drop/drag-utils.ts","../../src/cdk/drag-drop/drop.ts","../../src/cdk/drag-drop/drag-drop-registry.ts","../../src/cdk/drag-drop/drag-handle.ts","../../src/cdk/drag-drop/drag-placeholder.ts","../../src/cdk/drag-drop/drag-preview.ts","../../src/cdk/drag-drop/drop-container.ts","../../src/cdk/drag-drop/drag-drop-module.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  AfterViewInit,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  EmbeddedViewRef,\n  EventEmitter,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  QueryList,\n  SkipSelf,\n  ViewContainerRef,\n} from '@angular/core';\nimport {merge, Observable, Subject} from 'rxjs';\nimport {takeUntil, take} from 'rxjs/operators';\nimport {DragDropRegistry} from './drag-drop-registry';\nimport {\n  CdkDragDrop,\n  CdkDragEnd,\n  CdkDragEnter,\n  CdkDragExit,\n  CdkDragMove,\n  CdkDragStart,\n} from './drag-events';\nimport {CdkDragHandle} from './drag-handle';\nimport {CdkDragPlaceholder} from './drag-placeholder';\nimport {CdkDragPreview} from './drag-preview';\nimport {CDK_DROP_CONTAINER, CdkDropContainer} from './drop-container';\n\n\n// TODO(crisbeto): add auto-scrolling functionality.\n// TODO(crisbeto): add an API for moving a draggable up/down the\n// list programmatically. Useful for keyboard controls.\n\n/**\n * Amount the pixels the user should drag before we\n * consider them to have changed the drag direction.\n */\nconst POINTER_DIRECTION_CHANGE_THRESHOLD = 5;\n\n/** Element that can be moved inside a CdkDrop container. */\n@Directive({\n  selector: '[cdkDrag]',\n  exportAs: 'cdkDrag',\n  host: {\n    'class': 'cdk-drag',\n    '[class.cdk-drag-dragging]': '_isDragging()',\n  }\n})\nexport class CdkDrag<T = any> implements AfterViewInit, OnDestroy {\n  private _document: Document;\n  private _destroyed = new Subject<void>();\n\n  /** Element displayed next to the user's pointer while the element is dragged. */\n  private _preview: HTMLElement;\n\n  /** Reference to the view of the preview element. */\n  private _previewRef: EmbeddedViewRef<any> | null;\n\n  /** Reference to the view of the placeholder element. */\n  private _placeholderRef: EmbeddedViewRef<any> | null;\n\n  /** Element that is rendered instead of the draggable item while it is being sorted. */\n  private _placeholder: HTMLElement;\n\n  /** Coordinates within the element at which the user picked up the element. */\n  private _pickupPositionInElement: Point;\n\n  /** Coordinates on the page at which the user picked up the element. */\n  private _pickupPositionOnPage: Point;\n\n  /**\n   * Reference to the element that comes after the draggable in the DOM, at the time\n   * it was picked up. Used for restoring its initial position when it's dropped.\n   */\n  private _nextSibling: Node | null;\n\n  /**\n   * CSS `transform` applied to the element when it isn't being dragged. We need a\n   * passive transform in order for the dragged element to retain its new position\n   * after the user has stopped dragging and because we need to know the relative\n   * position in case they start dragging again. This corresponds to `element.style.transform`.\n   */\n  private _passiveTransform: Point = {x: 0, y: 0};\n\n  /** CSS `transform` that is applied to the element while it's being dragged. */\n  private _activeTransform: Point = {x: 0, y: 0};\n\n  /** Whether the element has moved since the user started dragging it. */\n  private _hasMoved = false;\n\n  /** Drop container in which the CdkDrag resided when dragging began. */\n  private _initialContainer: CdkDropContainer;\n\n  /** Cached scroll position on the page when the element was picked up. */\n  private _scrollPosition: {top: number, left: number};\n\n  /** Emits when the item is being moved. */\n  private _moveEvents = new Subject<CdkDragMove<T>>();\n\n  /**\n   * Amount of subscriptions to the move event. Used to avoid\n   * hitting the zone if the consumer didn't subscribe to it.\n   */\n  private _moveEventSubscriptions = 0;\n\n  /** Keeps track of the direction in which the user is dragging along each axis. */\n  private _pointerDirectionDelta: {x: -1 | 0 | 1, y: -1 | 0 | 1};\n\n  /** Pointer position at which the last change in the delta occurred. */\n  private _pointerPositionAtLastDirectionChange: Point;\n\n  /** Root element that will be dragged by the user. */\n  private _rootElement: HTMLElement;\n\n  /** Elements that can be used to drag the draggable item. */\n  @ContentChildren(CdkDragHandle) _handles: QueryList<CdkDragHandle>;\n\n  /** Element that will be used as a template to create the draggable item's preview. */\n  @ContentChild(CdkDragPreview) _previewTemplate: CdkDragPreview;\n\n  /** Template for placeholder element rendered to show where a draggable would be dropped. */\n  @ContentChild(CdkDragPlaceholder) _placeholderTemplate: CdkDragPlaceholder;\n\n  /** Arbitrary data to attach to this drag instance. */\n  @Input('cdkDragData') data: T;\n\n  /** Locks the position of the dragged element along the specified axis. */\n  @Input('cdkDragLockAxis') lockAxis: 'x' | 'y';\n\n  /**\n   * Selector that will be used to determine the root draggable element, starting from\n   * the `cdkDrag` element and going up the DOM. Passing an alternate root element is useful\n   * when trying to enable dragging on an element that you might not have access to.\n   */\n  @Input('cdkDragRootElement') rootElementSelector: string;\n\n  /** Emits when the user starts dragging the item. */\n  @Output('cdkDragStarted') started: EventEmitter<CdkDragStart> = new EventEmitter<CdkDragStart>();\n\n  /** Emits when the user stops dragging an item in the container. */\n  @Output('cdkDragEnded') ended: EventEmitter<CdkDragEnd> = new EventEmitter<CdkDragEnd>();\n\n  /** Emits when the user has moved the item into a new container. */\n  @Output('cdkDragEntered') entered: EventEmitter<CdkDragEnter<any>> =\n      new EventEmitter<CdkDragEnter<any>>();\n\n  /** Emits when the user removes the item its container by dragging it into another container. */\n  @Output('cdkDragExited') exited: EventEmitter<CdkDragExit<any>> =\n      new EventEmitter<CdkDragExit<any>>();\n\n  /** Emits when the user drops the item inside a container. */\n  @Output('cdkDragDropped') dropped: EventEmitter<CdkDragDrop<any>> =\n      new EventEmitter<CdkDragDrop<any>>();\n\n  /**\n   * Emits as the user is dragging the item. Use with caution,\n   * because this event will fire for every pixel that the user has dragged.\n   */\n  @Output('cdkDragMoved') moved: Observable<CdkDragMove<T>> = Observable.create(observer => {\n    const subscription = this._moveEvents.subscribe(observer);\n    this._moveEventSubscriptions++;\n\n    return () => {\n      subscription.unsubscribe();\n      this._moveEventSubscriptions--;\n    };\n  });\n\n  constructor(\n    /** Element that the draggable is attached to. */\n    public element: ElementRef<HTMLElement>,\n    /** Droppable container that the draggable is a part of. */\n    @Inject(CDK_DROP_CONTAINER) @Optional() @SkipSelf() public dropContainer: CdkDropContainer,\n    @Inject(DOCUMENT) document: any,\n    private _ngZone: NgZone,\n    private _viewContainerRef: ViewContainerRef,\n    private _viewportRuler: ViewportRuler,\n    private _dragDropRegistry: DragDropRegistry<CdkDrag<T>, CdkDropContainer>,\n    @Optional() private _dir: Directionality) {\n      this._document = document;\n      _dragDropRegistry.registerDragItem(this);\n    }\n\n  /**\n   * Returns the element that is being used as a placeholder\n   * while the current element is being dragged.\n   */\n  getPlaceholderElement(): HTMLElement {\n    return this._placeholder;\n  }\n\n  /** Returns the root draggable element. */\n  getRootElement(): HTMLElement {\n    return this._rootElement;\n  }\n\n  ngAfterViewInit() {\n    // We need to wait for the zone to stabilize, in order for the reference\n    // element to be in the proper place in the DOM. This is mostly relevant\n    // for draggable elements inside portals since they get stamped out in\n    // their original DOM position and then they get transferred to the portal.\n    this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n      const rootElement = this._rootElement = this._getRootElement();\n      rootElement.addEventListener('mousedown', this._startDragging);\n      rootElement.addEventListener('touchstart', this._startDragging);\n    });\n  }\n\n  ngOnDestroy() {\n    this._rootElement.removeEventListener('mousedown', this._startDragging);\n    this._rootElement.removeEventListener('touchstart', this._startDragging);\n    this._destroyPreview();\n    this._destroyPlaceholder();\n\n    // Do this check before removing from the registry since it'll\n    // stop being considered as dragged once it is removed.\n    if (this._isDragging()) {\n      // Since we move out the element to the end of the body while it's being\n      // dragged, we have to make sure that it's removed if it gets destroyed.\n      this._removeElement(this._rootElement);\n    }\n\n    this._nextSibling = null;\n    this._dragDropRegistry.removeDragItem(this);\n    this._moveEvents.complete();\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n\n  /** Starts the dragging sequence. */\n  _startDragging = (event: MouseEvent | TouchEvent) => {\n    // Delegate the event based on whether it started from a handle or the element itself.\n    if (this._handles.length) {\n      const targetHandle = this._handles.find(handle => {\n        const element = handle.element.nativeElement;\n        const target = event.target;\n        return !!target && (target === element || element.contains(target as HTMLElement));\n      });\n\n      if (targetHandle) {\n        this._pointerDown(targetHandle.element.nativeElement, event);\n      }\n    } else {\n      this._pointerDown(this._rootElement, event);\n    }\n  }\n\n  /** Checks whether the element is currently being dragged. */\n  _isDragging() {\n    return this._dragDropRegistry.isDragging(this);\n  }\n\n  /** Handler for when the pointer is pressed down on the element or the handle. */\n  private _pointerDown = (referenceElement: HTMLElement,\n                          event: MouseEvent | TouchEvent) => {\n\n    const isDragging = this._isDragging();\n\n    // Abort if the user is already dragging or is using a mouse button other than the primary one.\n    if (isDragging || (!this._isTouchEvent(event) && event.button !== 0)) {\n      return;\n    }\n\n    const endedOrDestroyed = merge(this.ended, this._destroyed);\n\n    this._dragDropRegistry.pointerMove\n      .pipe(takeUntil(endedOrDestroyed))\n      .subscribe(this._pointerMove);\n\n    this._dragDropRegistry.pointerUp\n      .pipe(takeUntil(endedOrDestroyed))\n      .subscribe(this._pointerUp);\n\n    this._dragDropRegistry.startDragging(this, event);\n    this._initialContainer = this.dropContainer;\n    this._scrollPosition = this._viewportRuler.getViewportScrollPosition();\n\n    // If we have a custom preview template, the element won't be visible anyway so we avoid the\n    // extra `getBoundingClientRect` calls and just move the preview next to the cursor.\n    this._pickupPositionInElement = this._previewTemplate ? {x: 0, y: 0} :\n        this._getPointerPositionInElement(referenceElement, event);\n    const pointerPosition = this._pickupPositionOnPage = this._getPointerPositionOnPage(event);\n\n    this._pointerDirectionDelta = {x: 0, y: 0};\n    this._pointerPositionAtLastDirectionChange = {x: pointerPosition.x, y: pointerPosition.y};\n\n    // Emit the event on the item before the one on the container.\n    this.started.emit({source: this});\n\n    if (this.dropContainer) {\n      const element = this._rootElement;\n\n      // Grab the `nextSibling` before the preview and placeholder\n      // have been created so we don't get the preview by accident.\n      this._nextSibling = element.nextSibling;\n\n      const preview = this._preview = this._createPreviewElement();\n      const placeholder = this._placeholder = this._createPlaceholderElement();\n\n      // We move the element out at the end of the body and we make it hidden, because keeping it in\n      // place will throw off the consumer's `:last-child` selectors. We can't remove the element\n      // from the DOM completely, because iOS will stop firing all subsequent events in the chain.\n      element.style.display = 'none';\n      this._document.body.appendChild(element.parentNode!.replaceChild(placeholder, element));\n      this._document.body.appendChild(preview);\n      this.dropContainer.start();\n    }\n  }\n\n  /** Handler that is invoked when the user moves their pointer after they've initiated a drag. */\n  private _pointerMove = (event: MouseEvent | TouchEvent) => {\n    // TODO(crisbeto): this should start dragging after a certain threshold,\n    // otherwise we risk interfering with clicks on the element.\n    if (!this._isDragging()) {\n      return;\n    }\n\n    this._hasMoved = true;\n    event.preventDefault();\n\n    const pointerPosition = this._getConstrainedPointerPosition(event);\n    this._updatePointerDirectionDelta(pointerPosition);\n\n    if (this.dropContainer) {\n      this._updateActiveDropContainer(pointerPosition);\n    } else {\n      const activeTransform = this._activeTransform;\n      activeTransform.x =\n          pointerPosition.x - this._pickupPositionOnPage.x + this._passiveTransform.x;\n      activeTransform.y =\n          pointerPosition.y - this._pickupPositionOnPage.y + this._passiveTransform.y;\n      this._setTransform(this._rootElement, activeTransform.x, activeTransform.y);\n    }\n\n    // Since this event gets fired for every pixel while dragging, we only\n    // want to fire it if the consumer opted into it. Also we have to\n    // re-enter the zone becaus we run all of the events on the outside.\n    if (this._moveEventSubscriptions > 0) {\n      this._ngZone.run(() => {\n        this._moveEvents.next({\n          source: this,\n          pointerPosition,\n          event\n        });\n      });\n    }\n  }\n\n  /** Handler that is invoked when the user lifts their pointer up, after initiating a drag. */\n  private _pointerUp = () => {\n    if (!this._isDragging()) {\n      return;\n    }\n\n    this._dragDropRegistry.stopDragging(this);\n\n    if (!this.dropContainer) {\n      // Convert the active transform into a passive one. This means that next time\n      // the user starts dragging the item, its position will be calculated relatively\n      // to the new passive transform.\n      this._passiveTransform.x = this._activeTransform.x;\n      this._passiveTransform.y = this._activeTransform.y;\n      this._ngZone.run(() => this.ended.emit({source: this}));\n      return;\n    }\n\n    this._animatePreviewToPlaceholder().then(() => this._cleanupDragArtifacts());\n  }\n\n  /** Cleans up the DOM artifacts that were added to facilitate the element being dragged. */\n  private _cleanupDragArtifacts() {\n    // Restore the element's visibility and insert it at its old position in the DOM.\n    // It's important that we maintain the position, because moving the element around in the DOM\n    // can throw off `NgFor` which does smart diffing and re-creates elements only when necessary,\n    // while moving the existing elements in all other cases.\n    this._rootElement.style.display = '';\n\n    if (this._nextSibling) {\n      this._nextSibling.parentNode!.insertBefore(this._rootElement, this._nextSibling);\n    } else {\n      this._placeholder.parentNode!.appendChild(this._rootElement);\n    }\n\n    this._destroyPreview();\n    this._destroyPlaceholder();\n\n    // Re-enter the NgZone since we bound `document` events on the outside.\n    this._ngZone.run(() => {\n      const currentIndex = this.dropContainer.getItemIndex(this);\n\n      this.ended.emit({source: this});\n      this.dropped.emit({\n        item: this,\n        currentIndex,\n        previousIndex: this._initialContainer.getItemIndex(this),\n        container: this.dropContainer,\n        previousContainer: this._initialContainer\n      });\n      this.dropContainer.drop(this, currentIndex, this._initialContainer);\n    });\n  }\n\n  /**\n   * Updates the item's position in its drop container, or moves it\n   * into a new one, depending on its current drag position.\n   */\n  private _updateActiveDropContainer({x, y}) {\n    // Drop container that draggable has been moved into.\n    const newContainer = this.dropContainer._getSiblingContainerFromPosition(this, x, y);\n\n    if (newContainer) {\n      this._ngZone.run(() => {\n        // Notify the old container that the item has left.\n        this.exited.emit({item: this, container: this.dropContainer});\n        this.dropContainer.exit(this);\n        // Notify the new container that the item has entered.\n        this.entered.emit({item: this, container: newContainer});\n        this.dropContainer = newContainer;\n        this.dropContainer.enter(this, x, y);\n      });\n    }\n\n    this.dropContainer._sortItem(this, x, y, this._pointerDirectionDelta);\n    this._setTransform(this._preview,\n                       x - this._pickupPositionInElement.x,\n                       y - this._pickupPositionInElement.y);\n  }\n\n  /**\n   * Creates the element that will be rendered next to the user's pointer\n   * and will be used as a preview of the element that is being dragged.\n   */\n  private _createPreviewElement(): HTMLElement {\n    let preview: HTMLElement;\n\n    if (this._previewTemplate) {\n      const viewRef = this._viewContainerRef.createEmbeddedView(this._previewTemplate.templateRef,\n                                                                this._previewTemplate.data);\n\n      preview = viewRef.rootNodes[0];\n      this._previewRef = viewRef;\n      this._setTransform(preview, this._pickupPositionOnPage.x, this._pickupPositionOnPage.y);\n    } else {\n      const element = this._rootElement;\n      const elementRect = element.getBoundingClientRect();\n\n      preview = element.cloneNode(true) as HTMLElement;\n      preview.style.width = `${elementRect.width}px`;\n      preview.style.height = `${elementRect.height}px`;\n      this._setTransform(preview, elementRect.left, elementRect.top);\n    }\n\n    preview.classList.add('cdk-drag-preview');\n    preview.setAttribute('dir', this._dir ? this._dir.value : 'ltr');\n\n    return preview;\n  }\n\n  /** Creates an element that will be shown instead of the current element while dragging. */\n  private _createPlaceholderElement(): HTMLElement {\n    let placeholder: HTMLElement;\n\n    if (this._placeholderTemplate) {\n      this._placeholderRef = this._viewContainerRef.createEmbeddedView(\n        this._placeholderTemplate.templateRef,\n        this._placeholderTemplate.data\n      );\n      placeholder = this._placeholderRef.rootNodes[0];\n    } else {\n      placeholder = this._rootElement.cloneNode(true) as HTMLElement;\n    }\n\n    placeholder.classList.add('cdk-drag-placeholder');\n    return placeholder;\n  }\n\n  /**\n   * Figures out the coordinates at which an element was picked up.\n   * @param referenceElement Element that initiated the dragging.\n   * @param event Event that initiated the dragging.\n   */\n  private _getPointerPositionInElement(referenceElement: HTMLElement,\n                                       event: MouseEvent | TouchEvent): Point {\n    const elementRect = this._rootElement.getBoundingClientRect();\n    const handleElement = referenceElement === this._rootElement ? null : referenceElement;\n    const referenceRect = handleElement ? handleElement.getBoundingClientRect() : elementRect;\n    const x = this._isTouchEvent(event) ?\n        event.targetTouches[0].pageX - referenceRect.left - this._scrollPosition.left :\n        event.offsetX;\n    const y = this._isTouchEvent(event) ?\n        event.targetTouches[0].pageY - referenceRect.top - this._scrollPosition.top :\n        event.offsetY;\n\n    return {\n      x: referenceRect.left - elementRect.left + x,\n      y: referenceRect.top - elementRect.top + y\n    };\n  }\n\n  /**\n   * Animates the preview element from its current position to the location of the drop placeholder.\n   * @returns Promise that resolves when the animation completes.\n   */\n  private _animatePreviewToPlaceholder(): Promise<void> {\n    // If the user hasn't moved yet, the transitionend event won't fire.\n    if (!this._hasMoved) {\n      return Promise.resolve();\n    }\n\n    const placeholderRect = this._placeholder.getBoundingClientRect();\n\n    // Apply the class that adds a transition to the preview.\n    this._preview.classList.add('cdk-drag-animating');\n\n    // Move the preview to the placeholder position.\n    this._setTransform(this._preview, placeholderRect.left, placeholderRect.top);\n\n    // If the element doesn't have a `transition`, the `transitionend` event won't fire. Since\n    // we need to trigger a style recalculation in order for the `cdk-drag-animating` class to\n    // apply its style, we take advantage of the available info to figure out whether we need to\n    // bind the event in the first place.\n    const duration = getTransitionDurationInMs(this._preview);\n\n    if (duration === 0) {\n      return Promise.resolve();\n    }\n\n    return this._ngZone.runOutsideAngular(() => {\n      return new Promise(resolve => {\n        const handler = ((event: TransitionEvent) => {\n          if (!event || event.target === this._preview) {\n            this._preview.removeEventListener('transitionend', handler);\n            resolve();\n            clearTimeout(timeout);\n          }\n        }) as EventListenerOrEventListenerObject;\n\n        // If a transition is short enough, the browser might not fire the `transitionend` event.\n        // Since we know how long it's supposed to take, add a timeout with a 50% buffer that'll\n        // fire if the transition hasn't completed when it was supposed to.\n        const timeout = setTimeout(handler, duration * 1.5);\n        this._preview.addEventListener('transitionend', handler);\n      });\n    });\n  }\n\n  /**\n   * Sets the `transform` style on an element.\n   * @param element Element on which to set the transform.\n   * @param x Desired position of the element along the X axis.\n   * @param y Desired position of the element along the Y axis.\n   */\n  private _setTransform(element: HTMLElement, x: number, y: number) {\n    element.style.transform = `translate3d(${x}px, ${y}px, 0)`;\n  }\n\n  /**\n   * Helper to remove an element from the DOM and to do all the necessary null checks.\n   * @param element Element to be removed.\n   */\n  private _removeElement(element: HTMLElement | null) {\n    if (element && element.parentNode) {\n      element.parentNode.removeChild(element);\n    }\n  }\n\n  /** Determines the point of the page that was touched by the user. */\n  private _getPointerPositionOnPage(event: MouseEvent | TouchEvent): Point {\n    const point = this._isTouchEvent(event) ? event.touches[0] : event;\n\n    return {\n      x: point.pageX - this._scrollPosition.left,\n      y: point.pageY - this._scrollPosition.top\n    };\n  }\n\n  /** Gets the pointer position on the page, accounting for any position constraints. */\n  private _getConstrainedPointerPosition(event: MouseEvent | TouchEvent): Point {\n    const point = this._getPointerPositionOnPage(event);\n    const dropContainerLock = this.dropContainer ? this.dropContainer.lockAxis : null;\n\n    if (this.lockAxis === 'x' || dropContainerLock === 'x') {\n      point.y = this._pickupPositionOnPage.y;\n    } else if (this.lockAxis === 'y' || dropContainerLock === 'y') {\n      point.x = this._pickupPositionOnPage.x;\n    }\n\n    return point;\n  }\n\n  /** Determines whether an event is a touch event. */\n  private _isTouchEvent(event: MouseEvent | TouchEvent): event is TouchEvent {\n    return event.type.startsWith('touch');\n  }\n\n  /** Destroys the preview element and its ViewRef. */\n  private _destroyPreview() {\n    if (this._preview) {\n      this._removeElement(this._preview);\n    }\n\n    if (this._previewRef) {\n      this._previewRef.destroy();\n    }\n\n    this._preview = this._previewRef = null!;\n  }\n\n  /** Destroys the placeholder element and its ViewRef. */\n  private _destroyPlaceholder() {\n    if (this._placeholder) {\n      this._removeElement(this._placeholder);\n    }\n\n    if (this._placeholderRef) {\n      this._placeholderRef.destroy();\n    }\n\n    this._placeholder = this._placeholderRef = null!;\n  }\n\n  /** Updates the current drag delta, based on the user's current pointer position on the page. */\n  private _updatePointerDirectionDelta(pointerPositionOnPage: Point) {\n    const {x, y} = pointerPositionOnPage;\n    const delta = this._pointerDirectionDelta;\n    const positionSinceLastChange = this._pointerPositionAtLastDirectionChange;\n\n    // Amount of pixels the user has dragged since the last time the direction changed.\n    const changeX = Math.abs(x - positionSinceLastChange.x);\n    const changeY = Math.abs(y - positionSinceLastChange.y);\n\n    // Because we handle pointer events on a per-pixel basis, we don't want the delta\n    // to change for every pixel, otherwise anything that depends on it can look erratic.\n    // To make the delta more consistent, we track how much the user has moved since the last\n    // delta change and we only update it after it has reached a certain threshold.\n    if (changeX > POINTER_DIRECTION_CHANGE_THRESHOLD) {\n      delta.x = x > positionSinceLastChange.x ? 1 : -1;\n      positionSinceLastChange.x = x;\n    }\n\n    if (changeY > POINTER_DIRECTION_CHANGE_THRESHOLD) {\n      delta.y = y > positionSinceLastChange.y ? 1 : -1;\n      positionSinceLastChange.y = y;\n    }\n  }\n\n  /** Gets the root draggable element, based on the `rootElementSelector`. */\n  private _getRootElement(): HTMLElement {\n    if (this.rootElementSelector) {\n      let currentElement = this.element.nativeElement.parentElement as HTMLElement | null;\n\n      while (currentElement) {\n        if (currentElement.matches(this.rootElementSelector)) {\n          return currentElement;\n        }\n\n        currentElement = currentElement.parentElement;\n      }\n    }\n\n    return this.element.nativeElement;\n  }\n}\n\n/** Parses a CSS time value to milliseconds. */\nfunction parseCssTimeUnitsToMs(value: string): number {\n  // Some browsers will return it in seconds, whereas others will return milliseconds.\n  const multiplier = value.toLowerCase().indexOf('ms') > -1 ? 1 : 1000;\n  return parseFloat(value) * multiplier;\n}\n\n/** Gets the transition duration, including the delay, of an element in milliseconds. */\nfunction getTransitionDurationInMs(element: HTMLElement): number {\n  const computedStyle = getComputedStyle(element);\n  const rawDuration = computedStyle.getPropertyValue('transition-duration');\n  const rawDelay = computedStyle.getPropertyValue('transition-delay');\n\n  return parseCssTimeUnitsToMs(rawDuration) + parseCssTimeUnitsToMs(rawDelay);\n}\n\n/** Point on the page or within an element. */\ninterface Point {\n  x: number;\n  y: number;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Moves an item one index in an array to another.\n * @param array Array in which to move the item.\n * @param fromIndex Starting index of the item.\n * @param toIndex Index to which the item should be moved.\n */\nexport function moveItemInArray<T = any>(array: T[], fromIndex: number, toIndex: number): void {\n  const from = clamp(fromIndex, array.length - 1);\n  const to = clamp(toIndex, array.length - 1);\n\n  if (from === to) {\n    return;\n  }\n\n  const target = array[from];\n  const delta = to < from ? -1 : 1;\n\n  for (let i = from; i !== to; i += delta) {\n    array[i] = array[i + delta];\n  }\n\n  array[to] = target;\n}\n\n\n/**\n * Moves an item from one array to another.\n * @param currentArray Array from which to transfer the item.\n * @param targetArray Array into which to put the item.\n * @param currentIndex Index of the item in its current array.\n * @param targetIndex Index at which to insert the item.\n */\nexport function transferArrayItem<T = any>(currentArray: T[],\n                                           targetArray: T[],\n                                           currentIndex: number,\n                                           targetIndex: number): void {\n\n  const from = clamp(currentIndex, currentArray.length - 1);\n  const to = clamp(targetIndex, targetArray.length);\n\n  if (currentArray.length) {\n    targetArray.splice(to, 0, currentArray.splice(from, 1)[0]);\n  }\n}\n\n/** Clamps a number between zero and a maximum. */\nfunction clamp(value: number, max: number): number {\n  return Math.max(0, Math.min(max, value));\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceArray} from '@angular/cdk/coercion';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n  QueryList,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CdkDrag} from './drag';\nimport {DragDropRegistry} from './drag-drop-registry';\nimport {CdkDragDrop, CdkDragEnter, CdkDragExit} from './drag-events';\nimport {moveItemInArray} from './drag-utils';\nimport {CDK_DROP_CONTAINER} from './drop-container';\n\n\n/** Counter used to generate unique ids for drop zones. */\nlet _uniqueIdCounter = 0;\n\n/**\n * Proximity, as a ratio to width/height, at which a\n * dragged item will affect the drop container.\n */\nconst DROP_PROXIMITY_THRESHOLD = 0.05;\n\n/** Container that wraps a set of draggable items. */\n@Component({\n  moduleId: module.id,\n  selector: 'cdk-drop',\n  exportAs: 'cdkDrop',\n  template: '<ng-content></ng-content>',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  styleUrls: ['drop.css'],\n  providers: [\n    {provide: CDK_DROP_CONTAINER, useExisting: CdkDrop},\n  ],\n  host: {\n    'class': 'cdk-drop',\n    '[id]': 'id',\n    '[class.cdk-drop-dragging]': '_dragging'\n  }\n})\nexport class CdkDrop<T = any> implements OnInit, OnDestroy {\n  /** Draggable items in the container. */\n  @ContentChildren(forwardRef(() => CdkDrag)) _draggables: QueryList<CdkDrag>;\n\n  /**\n   * Other draggable containers that this container is connected to and into which the\n   * container's items can be transferred. Can either be references to other drop containers,\n   * or their unique IDs.\n   */\n  @Input() connectedTo: (CdkDrop | string)[] | CdkDrop | string = [];\n\n  /** Arbitrary data to attach to this container. */\n  @Input() data: T;\n\n  /** Direction in which the list is oriented. */\n  @Input() orientation: 'horizontal' | 'vertical' = 'vertical';\n\n  /**\n   * Unique ID for the drop zone. Can be used as a reference\n   * in the `connectedTo` of another `CdkDrop`.\n   */\n  @Input() id: string = `cdk-drop-${_uniqueIdCounter++}`;\n\n  /** Locks the position of the draggable elements inside the container along the specified axis. */\n  @Input() lockAxis: 'x' | 'y';\n\n  /**\n   * Function that is used to determine whether an item\n   * is allowed to be moved into a drop container.\n   */\n  @Input() enterPredicate: (drag?: CdkDrag, drop?: CdkDrop) => boolean = () => true;\n\n  /** Emits when the user drops an item inside the container. */\n  @Output() dropped: EventEmitter<CdkDragDrop<T, any>> = new EventEmitter<CdkDragDrop<T, any>>();\n\n  /**\n   * Emits when the user has moved a new drag item into this container.\n   */\n  @Output() entered: EventEmitter<CdkDragEnter<T>> = new EventEmitter<CdkDragEnter<T>>();\n\n  /**\n   * Emits when the user removes an item from the container\n   * by dragging it into another container.\n   */\n  @Output() exited: EventEmitter<CdkDragExit<T>> = new EventEmitter<CdkDragExit<T>>();\n\n  constructor(\n    public element: ElementRef<HTMLElement>,\n    private _dragDropRegistry: DragDropRegistry<CdkDrag, CdkDrop<T>>) {}\n\n  ngOnInit() {\n    this._dragDropRegistry.registerDropContainer(this);\n  }\n\n  ngOnDestroy() {\n    this._dragDropRegistry.removeDropContainer(this);\n  }\n\n  /** Whether an item in the container is being dragged. */\n  _dragging = false;\n\n  /** Cache of the dimensions of all the items and the sibling containers. */\n  private _positionCache = {\n    items: [] as {drag: CdkDrag, clientRect: ClientRect, offset: number}[],\n    siblings: [] as {drop: CdkDrop, clientRect: ClientRect}[],\n    self: {} as ClientRect\n  };\n\n  /**\n   * Draggable items that are currently active inside the container. Includes the items\n   * from `_draggables`, as well as any items that have been dragged in, but haven't\n   * been dropped yet.\n   */\n  private _activeDraggables: CdkDrag[];\n\n  /**\n   * Keeps track of the item that was last swapped with the dragged item, as\n   * well as what direction the pointer was moving in when the swap occured.\n   */\n  private _previousSwap = {drag: null as CdkDrag | null, delta: 0};\n\n  /** Starts dragging an item. */\n  start(): void {\n    this._dragging = true;\n    this._activeDraggables = this._draggables.toArray();\n    this._cachePositions();\n  }\n\n  /**\n   * Drops an item into this container.\n   * @param item Item being dropped into the container.\n   * @param currentIndex Index at which the item should be inserted.\n   * @param previousContainer Container from which the item got dragged in.\n   */\n  drop(item: CdkDrag, currentIndex: number, previousContainer: CdkDrop): void {\n    this._reset();\n    this.dropped.emit({\n      item,\n      currentIndex,\n      previousIndex: previousContainer.getItemIndex(item),\n      container: this,\n      // TODO(crisbeto): reconsider whether to make this null if the containers are the same.\n      previousContainer\n    });\n  }\n\n  /**\n   * Emits an event to indicate that the user moved an item into the container.\n   * @param item Item that was moved into the container.\n   * @param pointerX Position of the item along the X axis.\n   * @param pointerY Position of the item along the Y axis.\n   */\n  enter(item: CdkDrag, pointerX: number, pointerY: number): void {\n    this.entered.emit({item, container: this});\n    this.start();\n\n    // We use the coordinates of where the item entered the drop\n    // zone to figure out at which index it should be inserted.\n    const newIndex = this._getItemIndexFromPointerPosition(item, pointerX, pointerY);\n    const currentIndex = this._activeDraggables.indexOf(item);\n    const newPositionReference = this._activeDraggables[newIndex];\n    const placeholder = item.getPlaceholderElement();\n\n    // Since the item may be in the `activeDraggables` already (e.g. if the user dragged it\n    // into another container and back again), we have to ensure that it isn't duplicated.\n    if (currentIndex > -1) {\n      this._activeDraggables.splice(currentIndex, 1);\n    }\n\n    // Don't use items that are being dragged as a reference, because\n    // their element has been moved down to the bottom of the body.\n    if (newPositionReference && !this._dragDropRegistry.isDragging(newPositionReference)) {\n      const element = newPositionReference.getRootElement();\n      element.parentElement!.insertBefore(placeholder, element);\n      this._activeDraggables.splice(newIndex, 0, item);\n    } else {\n      this.element.nativeElement.appendChild(placeholder);\n      this._activeDraggables.push(item);\n    }\n\n    // The transform needs to be cleared so it doesn't throw off the measurements.\n    placeholder.style.transform = '';\n\n    // Note that the positions were already cached when we called `start` above,\n    // but we need to refresh them since the amount of items has changed.\n    this._cachePositions();\n  }\n\n  /**\n   * Removes an item from the container after it was dragged into another container by the user.\n   * @param item Item that was dragged out.\n   */\n  exit(item: CdkDrag): void {\n    this._reset();\n    this.exited.emit({item, container: this});\n  }\n\n  /**\n   * Figures out the index of an item in the container.\n   * @param item Item whose index should be determined.\n   */\n  getItemIndex(item: CdkDrag): number {\n    return this._dragging ?\n        findIndex(this._positionCache.items, currentItem => currentItem.drag === item) :\n        this._draggables.toArray().indexOf(item);\n  }\n\n  /**\n   * Sorts an item inside the container based on its position.\n   * @param item Item to be sorted.\n   * @param pointerX Position of the item along the X axis.\n   * @param pointerY Position of the item along the Y axis.\n   * @param pointerDeta Direction in which the pointer is moving along each axis.\n   */\n  _sortItem(item: CdkDrag, pointerX: number, pointerY: number,\n            pointerDelta: {x: number, y: number}): void {\n    // Don't sort the item if it's out of range.\n    if (!this._isPointerNearDropContainer(pointerX, pointerY)) {\n      return;\n    }\n\n    const siblings = this._positionCache.items;\n    const newIndex = this._getItemIndexFromPointerPosition(item, pointerX, pointerY, pointerDelta);\n\n    if (newIndex === -1 && siblings.length > 0) {\n      return;\n    }\n\n    const isHorizontal = this.orientation === 'horizontal';\n    const currentIndex = findIndex(siblings, currentItem => currentItem.drag === item);\n    const siblingAtNewPosition = siblings[newIndex];\n    const currentPosition = siblings[currentIndex].clientRect;\n    const newPosition = siblingAtNewPosition.clientRect;\n    const delta = currentIndex > newIndex ? 1 : -1;\n\n    this._previousSwap.drag = siblingAtNewPosition.drag;\n    this._previousSwap.delta = isHorizontal ? pointerDelta.x : pointerDelta.y;\n\n    // How many pixels the item's placeholder should be offset.\n    const itemOffset = isHorizontal ? newPosition.left - currentPosition.left :\n                                      newPosition.top - currentPosition.top;\n\n    // How many pixels all the other items should be offset.\n    const siblingOffset = isHorizontal ? currentPosition.width * delta :\n                                         currentPosition.height * delta;\n\n    // Save the previous order of the items before moving the item to its new index.\n    // We use this to check whether an item has been moved as a result of the sorting.\n    const oldOrder = siblings.slice();\n\n    // Shuffle the array in place.\n    moveItemInArray(siblings, currentIndex, newIndex);\n\n    siblings.forEach((sibling, index) => {\n      // Don't do anything if the position hasn't changed.\n      if (oldOrder[index] === sibling) {\n        return;\n      }\n\n      const isDraggedItem = sibling.drag === item;\n      const offset = isDraggedItem ? itemOffset : siblingOffset;\n      const elementToOffset = isDraggedItem ? item.getPlaceholderElement() :\n                                              sibling.drag.getRootElement();\n\n      // Update the offset to reflect the new position.\n      sibling.offset += offset;\n\n      // Since we're moving the items with a `transform`, we need to adjust their cached\n      // client rects to reflect their new position, as well as swap their positions in the cache.\n      // Note that we shouldn't use `getBoundingClientRect` here to update the cache, because the\n      // elements may be mid-animation which will give us a wrong result.\n      if (isHorizontal) {\n        elementToOffset.style.transform = `translate3d(${sibling.offset}px, 0, 0)`;\n        this._adjustClientRect(sibling.clientRect, 0, offset);\n      } else {\n        elementToOffset.style.transform = `translate3d(0, ${sibling.offset}px, 0)`;\n        this._adjustClientRect(sibling.clientRect, offset, 0);\n      }\n    });\n  }\n\n  /**\n   * Figures out whether an item should be moved into a sibling\n   * drop container, based on its current position.\n   * @param item Drag item that is being moved.\n   * @param x Position of the item along the X axis.\n   * @param y Position of the item along the Y axis.\n   */\n  _getSiblingContainerFromPosition(item: CdkDrag, x: number, y: number): CdkDrop | null {\n    const result = this._positionCache.siblings.find(({clientRect}) => {\n      const {top, bottom, left, right} = clientRect;\n      return y >= top && y <= bottom && x >= left && x <= right;\n    });\n\n    return result && result.drop.enterPredicate(item, this) ? result.drop : null;\n  }\n\n  /** Refreshes the position cache of the items and sibling containers. */\n  private _cachePositions() {\n    this._positionCache.items = this._activeDraggables\n      .map(drag => {\n        const elementToMeasure = this._dragDropRegistry.isDragging(drag) ?\n            // If the element is being dragged, we have to measure the\n            // placeholder, because the element is hidden.\n            drag.getPlaceholderElement() :\n            drag.getRootElement();\n        const clientRect = elementToMeasure.getBoundingClientRect();\n\n        return {\n          drag,\n          offset: 0,\n          // We need to clone the `clientRect` here, because all the values on it are readonly\n          // and we need to be able to update them. Also we can't use a spread here, because\n          // the values on a `ClientRect` aren't own properties. See:\n          // https://developer.mozilla.org/en-US/docs/Web/API/Element/getBoundingClientRect#Notes\n          clientRect: {\n            top: clientRect.top,\n            right: clientRect.right,\n            bottom: clientRect.bottom,\n            left: clientRect.left,\n            width: clientRect.width,\n            height: clientRect.height\n          }\n        };\n      })\n      .sort((a, b) => a.clientRect.top - b.clientRect.top);\n\n    this._positionCache.siblings = coerceArray(this.connectedTo)\n      .map(drop => typeof drop === 'string' ? this._dragDropRegistry.getDropContainer(drop)! : drop)\n      .filter(drop => drop && drop !== this)\n      .map(drop => ({drop, clientRect: drop.element.nativeElement.getBoundingClientRect()}));\n\n    this._positionCache.self = this.element.nativeElement.getBoundingClientRect();\n  }\n\n  /** Resets the container to its initial state. */\n  private _reset() {\n    this._dragging = false;\n\n    // TODO(crisbeto): may have to wait for the animations to finish.\n    this._activeDraggables.forEach(item => item.getRootElement().style.transform = '');\n    this._activeDraggables = [];\n    this._positionCache.items = [];\n    this._positionCache.siblings = [];\n    this._previousSwap.drag = null;\n    this._previousSwap.delta = 0;\n  }\n\n  /**\n   * Updates the top/left positions of a `ClientRect`, as well as their bottom/right counterparts.\n   * @param clientRect `ClientRect` that should be updated.\n   * @param top Amount to add to the `top` position.\n   * @param left Amount to add to the `left` position.\n   */\n  private _adjustClientRect(clientRect: ClientRect, top: number, left: number) {\n    clientRect.top += top;\n    clientRect.bottom = clientRect.top + clientRect.height;\n\n    clientRect.left += left;\n    clientRect.right = clientRect.left + clientRect.width;\n  }\n\n  /**\n   * Gets the index of an item in the drop container, based on the position of the user's pointer.\n   * @param item Item that is being sorted.\n   * @param pointerX Position of the user's pointer along the X axis.\n   * @param pointerY Position of the user's pointer along the Y axis.\n   * @param delta Direction in which the user is moving their pointer.\n   */\n  private _getItemIndexFromPointerPosition(item: CdkDrag, pointerX: number, pointerY: number,\n                                           delta?: {x: number, y: number}) {\n\n    const isHorizontal = this.orientation === 'horizontal';\n\n    return findIndex(this._positionCache.items, ({drag, clientRect}, _, array) => {\n      if (drag === item) {\n        // If there's only one item left in the container, it must be\n        // the dragged item itself so we use it as a reference.\n        return array.length < 2;\n      }\n\n      if (delta) {\n        const direction = isHorizontal ? delta.x : delta.y;\n\n        // If the user is still hovering over the same item as last time, and they didn't change\n        // the direction in which they're dragging, we don't consider it a direction swap.\n        if (drag === this._previousSwap.drag && direction === this._previousSwap.delta) {\n          return false;\n        }\n      }\n\n      return isHorizontal ?\n          // Round these down since most browsers report client rects with\n          // sub-pixel precision, whereas the pointer coordinates are rounded to pixels.\n          pointerX >= Math.floor(clientRect.left) && pointerX <= Math.floor(clientRect.right) :\n          pointerY >= Math.floor(clientRect.top) && pointerY <= Math.floor(clientRect.bottom);\n    });\n  }\n\n  /**\n   * Checks whether the pointer coordinates are close to the drop container.\n   * @param pointerX Coordinates along the X axis.\n   * @param pointerY Coordinates along the Y axis.\n   */\n  private _isPointerNearDropContainer(pointerX: number, pointerY: number): boolean {\n    const {top, right, bottom, left, width, height} = this._positionCache.self;\n    const xThreshold = width * DROP_PROXIMITY_THRESHOLD;\n    const yThreshold = height * DROP_PROXIMITY_THRESHOLD;\n\n    return pointerY > top - yThreshold && pointerY < bottom + yThreshold &&\n           pointerX > left - xThreshold && pointerX < right + xThreshold;\n  }\n}\n\n\n/**\n * Finds the index of an item that matches a predicate function. Used as an equivalent\n * of `Array.prototype.find` which isn't part of the standard Google typings.\n * @param array Array in which to look for matches.\n * @param predicate Function used to determine whether an item is a match.\n */\nfunction findIndex<T>(array: T[],\n                      predicate: (value: T, index: number, obj: T[]) => boolean): number {\n\n  for (let i = 0; i < array.length; i++) {\n    if (predicate(array[i], i, array)) {\n      return i;\n    }\n  }\n\n  return -1;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, NgZone, OnDestroy, Inject} from '@angular/core';\nimport {DOCUMENT} from '@angular/common';\nimport {supportsPassiveEventListeners} from '@angular/cdk/platform';\nimport {Subject} from 'rxjs';\n\n/** Event options that can be used to bind an active event. */\nconst activeEventOptions = supportsPassiveEventListeners() ? {passive: false} : false;\n\n/** Handler for a pointer event callback. */\ntype PointerEventHandler = (event: TouchEvent | MouseEvent) => void;\n\n/**\n * Service that keeps track of all the drag item and drop container\n * instances, and manages global event listeners on the `document`.\n * @docs-private\n */\n// Note: this class is generic, rather than referencing CdkDrag and CdkDrop directly, in order to\n// avoid circular imports. If we were to reference them here, importing the registry into the\n// classes that are registering themselves will introduce a circular import.\n@Injectable({providedIn: 'root'})\nexport class DragDropRegistry<I, C extends {id: string}> implements OnDestroy {\n  private _document: Document;\n\n  /** Registered drop container instances. */\n  private _dropInstances = new Set<C>();\n\n  /** Registered drag item instances. */\n  private _dragInstances = new Set<I>();\n\n  /** Drag item instances that are currently being dragged. */\n  private _activeDragInstances = new Set<I>();\n\n  /** Keeps track of the event listeners that we've bound to the `document`. */\n  private _globalListeners = new Map<'touchmove' | 'mousemove' | 'touchend' | 'mouseup', {\n    handler: PointerEventHandler,\n    options?: any\n  }>();\n\n  /**\n   * Emits the `touchmove` or `mousemove` events that are dispatched\n   * while the user is dragging a drag item instance.\n   */\n  readonly pointerMove: Subject<TouchEvent | MouseEvent> = new Subject<TouchEvent | MouseEvent>();\n\n  /**\n   * Emits the `touchend` or `mouseup` events that are dispatched\n   * while the user is dragging a drag item instance.\n   */\n  readonly pointerUp: Subject<TouchEvent | MouseEvent> = new Subject<TouchEvent | MouseEvent>();\n\n  constructor(\n    private _ngZone: NgZone,\n    @Inject(DOCUMENT) _document: any) {\n    this._document = _document;\n  }\n\n  /** Adds a drop container to the registry. */\n  registerDropContainer(drop: C) {\n    if (!this._dropInstances.has(drop)) {\n      if (this.getDropContainer(drop.id)) {\n        throw Error(`Drop instance with id \"${drop.id}\" has already been registered.`);\n      }\n\n      this._dropInstances.add(drop);\n    }\n  }\n\n  /** Adds a drag item instance to the registry. */\n  registerDragItem(drag: I) {\n    this._dragInstances.add(drag);\n\n    if (this._dragInstances.size === 1) {\n      this._ngZone.runOutsideAngular(() => {\n        // The event handler has to be explicitly active, because\n        // newer browsers make it passive by default.\n        this._document.addEventListener('touchmove', this._preventScrollListener,\n            activeEventOptions);\n      });\n    }\n  }\n\n  /** Removes a drop container from the registry. */\n  removeDropContainer(drop: C) {\n    this._dropInstances.delete(drop);\n  }\n\n  /** Removes a drag item instance from the registry. */\n  removeDragItem(drag: I) {\n    this._dragInstances.delete(drag);\n    this.stopDragging(drag);\n\n    if (this._dragInstances.size === 0) {\n      this._document.removeEventListener('touchmove', this._preventScrollListener,\n          activeEventOptions as any);\n    }\n  }\n\n  /**\n   * Starts the dragging sequence for a drag instance.\n   * @param drag Drag instance which is being dragged.\n   * @param event Event that initiated the dragging.\n   */\n  startDragging(drag: I, event: TouchEvent | MouseEvent) {\n    this._activeDragInstances.add(drag);\n\n    if (this._activeDragInstances.size === 1) {\n      const isTouchEvent = event.type.startsWith('touch');\n      const moveEvent = isTouchEvent ? 'touchmove' : 'mousemove';\n      const upEvent = isTouchEvent ? 'touchend' : 'mouseup';\n\n      // We explicitly bind __active__ listeners here, because newer browsers will default to\n      // passive ones for `mousemove` and `touchmove`. The events need to be active, because we\n      // use `preventDefault` to prevent the page from scrolling while the user is dragging.\n      this._globalListeners\n        .set(moveEvent, {handler: e => this.pointerMove.next(e), options: activeEventOptions})\n        .set(upEvent, {handler: e => this.pointerUp.next(e)})\n        .forEach((config, name) => {\n          this._ngZone.runOutsideAngular(() => {\n            this._document.addEventListener(name, config.handler, config.options);\n          });\n        });\n    }\n  }\n\n  /** Stops dragging a drag item instance. */\n  stopDragging(drag: I) {\n    this._activeDragInstances.delete(drag);\n\n    if (this._activeDragInstances.size === 0) {\n      this._clearGlobalListeners();\n    }\n  }\n\n  /** Gets whether a drag item instance is currently being dragged. */\n  isDragging(drag: I) {\n    return this._activeDragInstances.has(drag);\n  }\n\n  /** Gets a drop container by its id. */\n  getDropContainer(id: string): C | undefined {\n    return Array.from(this._dropInstances).find(instance => instance.id === id);\n  }\n\n  ngOnDestroy() {\n    this._dragInstances.forEach(instance => this.removeDragItem(instance));\n    this._dropInstances.forEach(instance => this.removeDropContainer(instance));\n    this._clearGlobalListeners();\n    this.pointerMove.complete();\n    this.pointerUp.complete();\n  }\n\n  /**\n   * Listener used to prevent `touchmove` events while the element is being dragged.\n   * This gets bound once, ahead of time, because WebKit won't preventDefault on a\n   * dynamically-added `touchmove` listener. See https://bugs.webkit.org/show_bug.cgi?id=184250.\n   */\n  private _preventScrollListener = (event: TouchEvent) => {\n    if (this._activeDragInstances.size) {\n      event.preventDefault();\n    }\n  }\n\n  /** Clears out the global event listeners from the `document`. */\n  private _clearGlobalListeners() {\n    this._globalListeners.forEach((config, name) => {\n      this._document.removeEventListener(name, config.handler, config.options);\n    });\n\n    this._globalListeners.clear();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef} from '@angular/core';\n\n/** Handle that can be used to drag and CdkDrag instance. */\n@Directive({\n  selector: '[cdkDragHandle]',\n  host: {\n    'class': 'cdk-drag-handle'\n  }\n})\nexport class CdkDragHandle {\n  constructor(public element: ElementRef<HTMLElement>) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, TemplateRef, Input} from '@angular/core';\n\n/**\n * Element that will be used as a template for the placeholder of a CdkDrag when\n * it is being dragged. The placeholder is displayed in place of the element being dragged.\n */\n@Directive({\n  selector: 'ng-template[cdkDragPlaceholder]'\n})\nexport class CdkDragPlaceholder<T = any> {\n  /** Context data to be added to the placeholder template instance. */\n  @Input() data: T;\n  constructor(public templateRef: TemplateRef<T>) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, TemplateRef, Input} from '@angular/core';\n\n/**\n * Element that will be used as a template for the preview\n * of a CdkDrag when it is being dragged.\n */\n@Directive({\n  selector: 'ng-template[cdkDragPreview]'\n})\nexport class CdkDragPreview<T = any> {\n  /** Context data to be added to the preview template instance. */\n  @Input() data: T;\n  constructor(public templateRef: TemplateRef<T>) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken, QueryList} from '@angular/core';\nimport {CdkDrag} from './drag';\n\n\nexport interface CdkDropContainer<T = any> {\n  /** Arbitrary data to attach to all events emitted by this container. */\n  data: T;\n\n  /** Unique ID for the drop zone. */\n  id: string;\n\n  /** Direction in which the list is oriented. */\n  orientation: 'horizontal' | 'vertical';\n\n  /** Locks the position of the draggable elements inside the container along the specified axis. */\n  lockAxis: 'x' | 'y';\n\n  /** Starts dragging an item. */\n  start(): void;\n\n  /**\n   * Drops an item into this container.\n   * @param item Item being dropped into the container.\n   * @param currentIndex Index at which the item should be inserted.\n   * @param previousContainer Container from which the item got dragged in.\n   */\n  drop(item: CdkDrag, currentIndex: number, previousContainer?: CdkDropContainer): void;\n\n  /**\n   * Emits an event to indicate that the user moved an item into the container.\n   * @param item Item that was moved into the container.\n   * @param pointerX Position of the item along the X axis.\n   * @param pointerY Position of the item along the Y axis.\n   */\n  enter(item: CdkDrag, pointerX: number, pointerY: number): void;\n\n  /**\n   * Removes an item from the container after it was dragged into another container by the user.\n   * @param item Item that was dragged out.\n   */\n  exit(item: CdkDrag): void;\n\n  /**\n   * Figures out the index of an item in the container.\n   * @param item Item whose index should be determined.\n   */\n  getItemIndex(item: CdkDrag): number;\n  _sortItem(item: CdkDrag, pointerX: number, pointerY: number, delta: {x: number, y: number}): void;\n  _draggables: QueryList<CdkDrag>;\n  _getSiblingContainerFromPosition(item: CdkDrag, x: number, y: number): CdkDropContainer | null;\n}\n\n/**\n * Injection token that is used to provide a CdkDrop instance to CdkDrag.\n * Used for avoiding circular imports.\n */\nexport const CDK_DROP_CONTAINER = new InjectionToken<CdkDropContainer>('CDK_DROP_CONTAINER');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CdkDrop} from './drop';\nimport {CdkDrag} from './drag';\nimport {CdkDragHandle} from './drag-handle';\nimport {CdkDragPreview} from './drag-preview';\nimport {CdkDragPlaceholder} from './drag-placeholder';\n\n@NgModule({\n  declarations: [\n    CdkDrop,\n    CdkDrag,\n    CdkDragHandle,\n    CdkDragPreview,\n    CdkDragPlaceholder,\n  ],\n  exports: [\n    CdkDrop,\n    CdkDrag,\n    CdkDragHandle,\n    CdkDragPreview,\n    CdkDragPlaceholder,\n  ],\n})\nexport class DragDropModule {}\n"],"names":["parseCssTimeUnitsToMs","value","multiplier","toLowerCase","indexOf","parseFloat","getTransitionDurationInMs","element","computedStyle","getComputedStyle","rawDuration","getPropertyValue","rawDelay","moveItemInArray","array","fromIndex","toIndex","from","clamp","length","to","target","delta","i","transferArrayItem","currentArray","targetArray","currentIndex","targetIndex","splice","max","Math","min","predicate","activeEventOptions","supportsPassiveEventListeners","passive","DragDropRegistry","_ngZone","_document","_this","this","_dropInstances","Set","_dragInstances","_activeDragInstances","_globalListeners","Map","pointerMove","Subject","pointerUp","_preventScrollListener","event","size","preventDefault","prototype","registerDropContainer","drop","has","getDropContainer","id","Error","add","registerDragItem","drag","runOutsideAngular","addEventListener","removeDropContainer","delete","removeDragItem","stopDragging","removeEventListener","startDragging","isTouchEvent","type","startsWith","moveEvent","upEvent","set","handler","e","next","options","forEach","config","name","_clearGlobalListeners","isDragging","Array","find","instance","ngOnDestroy","complete","clear","Injectable","args","providedIn","NgZone","undefined","decorators","Inject","DOCUMENT","CdkDragHandle","Directive","selector","host","class","ElementRef","CdkDragPlaceholder","templateRef","TemplateRef","data","Input","CdkDragPreview","CDK_DROP_CONTAINER","InjectionToken","CdkDrag","dropContainer","document","_viewContainerRef","_viewportRuler","_dragDropRegistry","_dir","_destroyed","_passiveTransform","x","y","_activeTransform","_hasMoved","_moveEvents","_moveEventSubscriptions","started","EventEmitter","ended","entered","exited","dropped","moved","Observable","create","observer","subscription","subscribe","unsubscribe","_startDragging","_handles","targetHandle","handle","nativeElement","contains","_pointerDown","_rootElement","referenceElement","_isDragging","_isTouchEvent","button","endedOrDestroyed","merge","pipe","takeUntil","_pointerMove","_pointerUp","_initialContainer","_scrollPosition","getViewportScrollPosition","_pickupPositionInElement","_previewTemplate","_getPointerPositionInElement","pointerPosition","_pickupPositionOnPage","_getPointerPositionOnPage","_pointerDirectionDelta","_pointerPositionAtLastDirectionChange","emit","source","_nextSibling","nextSibling","preview","_preview","_createPreviewElement","placeholder","_placeholder","_createPlaceholderElement","style","display","body","appendChild","replaceChild","start","_getConstrainedPointerPosition","_updatePointerDirectionDelta","_updateActiveDropContainer","activeTransform","_setTransform","run","_animatePreviewToPlaceholder","then","_cleanupDragArtifacts","getPlaceholderElement","getRootElement","ngAfterViewInit","onStable","asObservable","take","rootElement","_getRootElement","_destroyPreview","_destroyPlaceholder","_removeElement","insertBefore","getItemIndex","item","previousIndex","container","previousContainer","_a","newContainer","_getSiblingContainerFromPosition","exit","enter","_sortItem","viewRef","createEmbeddedView","rootNodes","_previewRef","elementRect","getBoundingClientRect","cloneNode","width","height","left","top","classList","setAttribute","_placeholderTemplate","_placeholderRef","handleElement","referenceRect","targetTouches","pageX","offsetX","pageY","offsetY","Promise","resolve","placeholderRect","duration","clearTimeout","timeout","setTimeout","transform","parentNode","removeChild","point","touches","dropContainerLock","lockAxis","destroy","pointerPositionOnPage","positionSinceLastChange","changeX","abs","changeY","rootElementSelector","currentElement","matches","parentElement","exportAs","[class.cdk-drag-dragging]","Optional","SkipSelf","ViewContainerRef","ViewportRuler","Directionality","ContentChildren","ContentChild","Output","_uniqueIdCounter","CdkDrop","connectedTo","orientation","enterPredicate","_dragging","_positionCache","items","siblings","self","_previousSwap","ngOnInit","_activeDraggables","_draggables","toArray","_cachePositions","_reset","pointerX","pointerY","newIndex","_getItemIndexFromPointerPosition","newPositionReference","push","findIndex","currentItem","pointerDelta","_isPointerNearDropContainer","isHorizontal","siblingAtNewPosition","currentPosition","clientRect","newPosition","itemOffset","siblingOffset","oldOrder","slice","sibling","index","isDraggedItem","offset","elementToOffset","_adjustClientRect","result","bottom","right","map","elementToMeasure","sort","a","b","coerceArray","filter","_","direction","floor","xThreshold","yThreshold","Component","template","encapsulation","ViewEncapsulation","None","changeDetection","ChangeDetectionStrategy","OnPush","styles","providers","provide","useExisting","[id]","[class.cdk-drop-dragging]","propDecorators","NgModule","declarations","exports","DragDropModule"],"mappings":"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"}